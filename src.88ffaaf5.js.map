{"version":3,"sources":["index.js"],"names":["CountdownTimer","selector","finalDate","intervalId","targetDate","setInterval","currentDate","Date","now","deltaTime","time","getTimeComponents","clearInterval","updateTimerFace","value","String","padStart","days","pad","Math","floor","hours","mins","secs","timerSelector","document","querySelector","textContent","timer","start"],"mappings":";;;AAkGA,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAlGA,QAAA,oBAEMA,IAAAA,EAAAA,WAEiC,SAAA,EAAA,GAAtBC,IAAAA,EAAAA,EAAAA,SAAUC,EAAAA,EAAAA,UAAY,EAAA,KAAA,GAC1BC,KAAAA,WAAa,KACbF,KAAAA,SAAWA,EACXC,KAAAA,UAAYA,EA2FzB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,QAxFI,MAAA,WAAQ,IAAA,EAAA,KACEE,EAAa,KAAKF,UAGnBC,KAAAA,WAAaE,YAAY,WACpBC,IAAAA,EAAcC,KAAKC,MACnBC,EAAYL,EAAaE,EAE3BG,GAAAA,GAAa,EAAG,CACVC,IAAAA,EAAO,EAAKC,kBAAkB,GAG7BC,OAFP,EAAKC,gBAAgBH,EAAM,EAAKT,UAEzBW,cAAc,EAAKT,YAGxBO,IAAAA,EAAO,EAAKC,kBAAkBF,GAEpC,EAAKI,gBAAgBH,EAAM,EAAKT,WACjC,OAsEX,CAAA,IAAA,MAnEI,MAAA,SAAIa,GACOC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,OAkEzC,CAAA,IAAA,oBA9DI,MAAA,SAAkBN,GAMP,MAAA,CAAEO,KALI,KAAKC,IAAIC,KAAKC,MAAMV,EAAQ,QAK1BW,MAJD,KAAKH,IAAIC,KAAKC,MAAOV,EAAQ,MAAyB,OAI9CY,KAHT,KAAKJ,IAAIC,KAAKC,MAAOV,EAAQ,KAAoB,MAGlCa,KAFf,KAAKL,IAAIC,KAAKC,MAAOV,EAAQ,IAAc,SA0DhE,CAAA,IAAA,kBArDI,MAAA,SAA6CT,EAAAA,GAA3BgB,IAAAA,EAAAA,EAAAA,KAAMI,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,KAAMC,EAAAA,EAAAA,KAC3BC,EAAgBC,SAASC,cAAiBzB,GAAAA,OAAAA,IAChDuB,EAAcE,cAAc,uBAAuBC,YAAiBV,GAAAA,OAAAA,GACpEO,EAAcE,cAAc,wBAAwBC,YAAiBN,GAAAA,OAAAA,GACrEG,EAAcE,cAAc,uBAAuBC,YAAiBL,GAAAA,OAAAA,GACpEE,EAAcE,cAAc,uBAAuBC,YAAiBJ,GAAAA,OAAAA,OAgD5E,EAhGMvB,GAqDA4B,EAAQ,IAAI5B,EAAe,CAC7BC,SAAU,WACVC,UAAW,IAAIK,KAAK,kBAExBqB,EAAMC","file":"src.88ffaaf5.js","sourceRoot":"..\\src","sourcesContent":["import './css/styles.css'\r\n\r\nclass CountdownTimer {\r\n\r\n    constructor({selector, finalDate}) {\r\n        this.intervalId = null;\r\n        this.selector = selector;\r\n        this.finalDate = finalDate;\r\n    }\r\n\r\n    start() {\r\n        const targetDate = this.finalDate;\r\n \r\n\r\n        this.intervalId = setInterval(() => {\r\n            const currentDate = Date.now();\r\n            const deltaTime = targetDate - currentDate;\r\n\r\n            if (deltaTime <= 0) {\r\n                const time = this.getTimeComponents(0);        \r\n                this.updateTimerFace(time, this.selector);\r\n                \r\n                return clearInterval(this.intervalId);                \r\n            }\r\n\r\n            const time = this.getTimeComponents(deltaTime)\r\n        \r\n            this.updateTimerFace(time, this.selector);\r\n        }, 1000);\r\n    }\r\n\r\n    pad(value) {\r\n        return String(value).padStart(2, '0');\r\n    }\r\n    \r\n    // считаем кол-во дней, часов... в разнице запланированой даты и текущей\r\n    getTimeComponents(time) {\r\n        const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\r\n        const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\r\n        const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\r\n        const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\r\n\r\n        return { days, hours, mins, secs };\r\n    }\r\n\r\n    updateTimerFace({ days, hours, mins, secs }, selector) {\r\n        const timerSelector = document.querySelector(`${selector}`)\r\n        timerSelector.querySelector('[data-value=\"days\"]').textContent = `${days}`;\r\n        timerSelector.querySelector('[data-value=\"hours\"]').textContent = `${hours}`;\r\n        timerSelector.querySelector('[data-value=\"mins\"]').textContent = `${mins}`;\r\n        timerSelector.querySelector('[data-value=\"secs\"]').textContent = `${secs}`;\r\n    }\r\n    \r\n}\r\n\r\nconst timer = new CountdownTimer({  \r\n    selector: '#timer-1',\r\n    finalDate: new Date('May 20, 2021'),\r\n});\r\ntimer.start()\r\n\r\n// const refs = {\r\n//     days: document.querySelector('[data-value=\"days\"]'),\r\n//     hours: document.querySelector('[data-value=\"hours\"]'),\r\n//     mins: document.querySelector('[data-value=\"mins\"]'),\r\n//     secs: document.querySelector('[data-value=\"secs\"]'),\r\n// }\r\n\r\n// function updateTimerFace({ days, hours, mins, secs }) {\r\n//     refs.days.textContent = `${days}`;\r\n//     refs.hours.textContent = `${hours}`;\r\n//     refs.mins.textContent = `${mins}`;\r\n//     refs.secs.textContent = `${secs}`;\r\n// }\r\n\r\n// /*\r\n//  * Оставшиеся дни: делим значение UTC на 1000 * 60 * 60 * 24, количество\r\n//  * миллисекунд в одном дне (миллисекунды * секунды * минуты * часы)\r\n//  */\r\n// const days = Math.floor(time / (1000 * 60 * 60 * 24));\r\n\r\n// /*\r\n//  * Оставшиеся часы: получаем остаток от предыдущего расчета с помощью оператора\r\n//  * остатка % и делим его на количество миллисекунд в одном часе\r\n//  * (1000 * 60 * 60 = миллисекунды * минуты * секунды)\r\n//  */\r\n// const hours = Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n\r\n// /*\r\n//  * Оставшиеся минуты: получаем оставшиеся минуты и делим их на количество\r\n//  * миллисекунд в одной минуте (1000 * 60 = миллисекунды * секунды)\r\n//  */\r\n// const mins = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\r\n\r\n// /*\r\n//  * Оставшиеся секунды: получаем оставшиеся секунды и делим их на количество\r\n//  * миллисекунд в одной секунде (1000)\r\n//  */\r\n// const secs = Math.floor((time % (1000 * 60)) / 1000);"]}